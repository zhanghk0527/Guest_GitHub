┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
|                                                                                                                            |
|                                                      【 接 口 测 试 】                                                       |
|                                                                                                                            |
├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
|                                                                                                                            |
|                                                        接 口 的 分 类                                                       |
|                                                                                                                            |
|                                                        接口测试的意义                                                        |
|                                                                                                                            |
|                                                        接口和类的区别                                                        |
|                                                                                                                            |
|                                                                                                                            |
|                                                                                                                            |
|                                                                                                                            |
|                                                                                                                            |
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘



┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                                           接口的分类
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

    广义分为：程序接口、协议接口

        程序接口：程序模块间的接口，对类、方法或函数进行输入、输出的操作，使用语言与接口开发语言相同；

        协议接口：HTTP/SOAP 类似的协议接口，底层逻辑已经封装，通过链接的方式进行接口请求，对语言无要求，也可以使用工具进行测试。


    从调用方式上，也可以把接口分为：

        1. 系统与系统之间的接口；
                如：
                    a. 同公司下，不同系统之间的接口调用；
                    b. 以及不同公司下，提供的第三方接口之间的调用。

        2. 下层服务对上层服务的接口；
                如：
                    某系统内 应用层 <—> Service层 <—> DB层

                        应用层：提供UI操作

                        service层：服务器对数据的处理

                        DB层：存放数据

                查询接口：应用层输入查询内容 -> 向后台服务发送请求 -> 后台服务通过访问数据库进行数据查询 -> 把数据查询结果做处理返回应用层显示

        3. 系统内部的服务与服务之间的调用。
                如：
                    同系统内，不同服务之间的接口调用：

                       service1 <—> service2 <—> service3

                    也可以理解为接口与接口之间的调用；

                    用户查询接口： 实现查询某个用户，返回该用户的用户信息

                    用户抽奖服务： 输入用户名或手机号进行抽奖，且为系统内部已存在的用户

                    需求：用户抽奖服务输入的用户名不存在，返回null

                    实现思路：

                        抽奖服务调用用户查询接口，当在用户抽奖中，输入的用户名或手机号时，优先调用用户查询接口，查询输入用户名或手机号是否存在，
                    如果输入的用户名或手机号返回null，那么直接把该返回信息在用户抽奖页面展示。



┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                                          接口测试的意义
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

传统UI自动化：不仅开发脚本周期长，而且是在整体从开发完毕到测试结束没有功能使用问题且UI调整较小的时候才可使用，投入成本高，发现不了深层次的问题；

接口自动化：更早介入测试，更早的发现问题，早期的测试介入，问题修复的成本会降低，也能大大缩短整体项目研发周期，能发现更深层次的问题，提高准确性。


┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                                          接口和类的区别
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

以java接口为例：接口(interface)与类(class)的实现类似，但是概念不同，所以接口不是类，类也不是接口。

                接口(interface)：接口包含类里面要实现的方法，且无法实例化，但是可以被实现；

                        ┌────────────────────────────────────────┐
                        │                                        │
                        │ // 定义接口                             │
                        │ package test.dome;                     │
                        │                                        │
                        │ public interface IAnimal{              │
                        │                                        │
                        │          // 行为方法，描述特性            │
                        │          punlic String Behavior();     │
                        │ }                                      │
                        │                                        │
                        └────────────────────────────────────────┘

                类(class)：类里面则需要说明和描述对象的属性和方法。

                        ┌──────────────────────────────────────────────────────┐
                        │                                                      │
                        │ // 实现Dog接口                                        │
                        │ package test.dome;                                   │
                        │                                                      │
                        │ public class Dog implements IAnimal{                 │
                        │                                                      │
                        │         @Override                                    │
                        │         punlic String Behavior() {                   │
                        │             String ActiveTime = "白天睡觉，晚上值班"    │
                        │             return ActiveTime                        │
                        │          }                                           │
                        │ }                                                    │
                        │                                                      │
                        └──────────────────────────────────────────────────────┘

