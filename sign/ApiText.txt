┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
|                                                                                                                            |
|                                                      【 接 口 测 试 】                                                      |
|                                                                                                                            |
├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
|                                                                                                                            |
|                                                      a. 接 口 的 分 类                                                      |
|                                                                                                                            |
|                                                      b. 接口测试的意义                                                      |
|                                                                                                                            |
|                                                      c. 接口和类的区别                                                      |
|                                                                                                                            |
|                                                      d.   HTTP 协议                                                        |
|                                                                                                                            |
|                                                                                                                            |
|                                                                                                                            |
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘



┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                                           接口的分类
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

    广义分为：程序接口、协议接口

        程序接口：程序模块间的接口，对类、方法或函数进行输入、输出的操作，使用语言与接口开发语言相同；

        协议接口：HTTP/SOAP 类似的协议接口，底层逻辑已经封装，通过链接的方式进行接口请求，对语言无要求，也可以使用工具进行测试。


    从调用方式上，也可以把接口分为：

        1. 系统与系统之间的接口；
                如：
                    a. 同公司下，不同系统之间的接口调用；
                    b. 以及不同公司下，提供的第三方接口之间的调用。

        2. 下层服务对上层服务的接口；
                如：
                    某系统内 应用层 <—> Service层 <—> DB层

                        应用层：提供UI操作

                        service层：服务器对数据的处理

                        DB层：存放数据

                查询接口：应用层输入查询内容 -> 向后台服务发送请求 -> 后台服务通过访问数据库进行数据查询 -> 把数据查询结果做处理返回应用层显示

        3. 系统内部的服务与服务之间的调用。
                如：
                    同系统内，不同服务之间的接口调用：

                       service1 <—> service2 <—> service3

                    也可以理解为接口与接口之间的调用；

                    用户查询接口： 实现查询某个用户，返回该用户的用户信息

                    用户抽奖服务： 输入用户名或手机号进行抽奖，且为系统内部已存在的用户

                    需求：用户抽奖服务输入的用户名不存在，返回null

                    实现思路：

                        抽奖服务调用用户查询接口，当在用户抽奖中，输入的用户名或手机号时，优先调用用户查询接口，查询输入用户名或手机号是否存在，
                    如果输入的用户名或手机号返回null，那么直接把该返回信息在用户抽奖页面展示。



┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                                          接口测试的意义
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

传统UI自动化：不仅开发脚本周期长，而且是在整体从开发完毕到测试结束没有功能使用问题且UI调整较小的时候才可使用，投入成本高，发现不了深层次的问题；

接口自动化：更早介入测试，更早的发现问题，早期的测试介入，问题修复的成本会降低，也能大大缩短整体项目研发周期，能发现更深层次的问题，提高准确性。


┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                                          接口和类的区别
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

以java接口为例：接口(interface)与类(class)的实现类似，但是概念不同，所以接口不是类，类也不是接口。

                接口(interface)：接口包含类里面要实现的方法，且无法实例化，但是可以被实现；

                        ┌────────────────────────────────────────┐
                        │                                        │
                        │ // 定义接口                             │
                        │ package test.dome;                     │
                        │                                        │
                        │ public interface IAnimal{              │
                        │                                        │
                        │          // 行为方法，描述特性           │
                        │          punlic String Behavior();     │
                        │ }                                      │
                        │                                        │
                        └────────────────────────────────────────┘

                类(class)：类里面则需要说明和描述对象的属性和方法。

                        ┌──────────────────────────────────────────────────────┐
                        │                                                      │
                        │ // 实现Dog接口                                        │
                        │ package test.dome;                                   │
                        │                                                      │
                        │ public class Dog implements IAnimal{                 │
                        │                                                      │
                        │         @Override                                    │
                        │         punlic String Behavior() {                   │
                        │             String ActiveTime = "白天睡觉，晚上值班"   │
                        │             return ActiveTime                        │
                        │          }                                           │
                        │ }                                                    │
                        │                                                      │
                        └──────────────────────────────────────────────────────┘

看一下Python接口实现的方式：
    Python中没有提供interface的创建和使用，但是可以借助第三方库Zope.interface来实现。

                        ┌──────────────────────────────────────────────────────┐
                        │                                                      │
                        │ # Python - Demo                                      │
                        │ class Host(object):                                  │
                        │                                                      │
                        │       def goodmorning(self, name):                   │
                        │                                                      │
                        │        """ Say good morning to guests """            │
                        │           return "Good morning, %s!" % name          │
                        │                                                      │
                        │ if __name__ == '__main__':                           │
                        │    h = Host()                                        │
                        │    h1 = h.goodmorning('zhangsan')                    │
                        │    print (h1)                                        │
                        │                                                      │
                        └──────────────────────────────────────────────────────┘

    上面demo使用Zope.interface后：

                        ┌────────────────────────────────────────────────────────┐
                        │                                                        │
                        │ # Python - Zope.interface - Demo                       │
                        │ from zope.interface import Interface                   │
                        │ from zope.interface.declarations import implementer    │
                        │                                                        │
                        │ # 定义接口                                              │
                        │ class Host(object):                                    │
                        │                                                        │
                        │       def goodmorning(self, name):                     │
                        │                                                        │
                        │        """ Say good morning to guests """              │
                        │                                                        │
                        │ @implementer  # 继承接口                                │
                        │ class Host:                                            │
                        │                                                        │
                        │    def goodmorning(self, guest)                        │
                        │                                                        │
                        │    """ Say good morning to guests """                  │
                        │    return "Good morning, %s!" % guest                  │
                        │                                                        │
                        │ if __name__ == '__main__':                             │
                        │    P = Host()                                          │
                        │    h1 = P.goodmorning('Alen')                          │
                        │    print (h1)                                          │
                        │                                                        │
                        └────────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                                          HTTP协议
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

什么是HTTP协议？

    a. HTTP协议是Hyper Text Transfer Protocol 超文本传输协议的缩写，是万维网(WWW:World Wide Web)从服务器传输超文本到本地浏览器的传送协议；

    b. HTTP协议是基于TCP/IP通信协议来传输数据的，包含：图片、文本、媒体、HTML文件等等;

    c. HTTP协议工作与 客户端 <-> 服务端 架构上面，浏览器作为HTTP客户端通过URL向HTTP服务端(Web服务器)发送请求。

HTTP协议的特点？

    a. 无连接：

         无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，既断开连接。这种方式可以节省传输时间。

    b. 媒体独立：

         只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端和服务器需要指定使用适合的MIME-type内容类型。

    c. 无状态：

         无状态是指协议对于事务处理没有记忆能力，缺少状态意味着如果后续处理需要前面的信息，它必须重新传递数据，这样可能导致每次连接传送的
         数据量增大，如果当前请求不需要先前信息，则应答速度就会变快。

HTTP请求方法有哪些？

    HTTP请求可以使用多种请求方法：

        HTTP1.0：定义了三种请求方法：GET、POST、HEAD；

        HTTP1.1：新增五种请求方法：PUT、TRACE、OPTIONS、DELETE、CONNECT。

    HTTP协议请求方法说明：

        GET：请求指定的页面信息，并返回实体主体；

        PUT：从客户端向服务器传送的数据取代指定文档的内容；

        POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件），数据被包含在请求体中，POST请求可能会导致新的资源的建立或已有资源的修改；

        HEAD：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取头信息；

        TRACE：请求服务器返回收到的请求信息，主要用于测试或诊断；

        DELETE：请求服务器删除指定的页面；

        OPTIONS：请求查询服务器的性能，或者查询与资源相关的选项和需求；

        CONNECT：HTTP1.1协议中预留给能够将连接改为通道方式的代理服务器。

    HTTP协议请求状态码：

        当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（Server Header）用以响应浏览器的请求。

        共分为五种类型：

            1**：信息，服务器收到请求，需要请求者继续执行操作；

            2**：成功，操作被成功接收或处理；

            3**：重定向，需要进一步的操作以完成请求；

            4**：客户端错误，请求包含语法错误或无法完成请求；

            5**：服务器错误，服务器在处理请求的过程中发生了错误。

        常见状态码及说明：

            200 OK：请求成功，一般用于GET和POST请求；

            302 Fund：临时移动，资源只是临时被移动，客户端应继续使用原有URI；

            400 Bad Request：客户端请求有语法错误，不能被服务器所理解；

            401 Unauthorized：请求要求用户的身份认证；

            403 Forbidden：服务器理解请求客户端的请求，但是拒绝执行此请求；

            404 Not Found：服务器无法根据客户端的请求找到资源；

            500 Internal Server Error：服务器内部错误，无法完成请求；

            503 Server Unavailable：由于超载或系统维护，服务器暂时无法处理客户端请求。

请求头信息与响应头信息？

    a. 请求头信息(Request_Headers)：

           请求报文头允许客户端向服务端传递请求的附加信息以及客户端自身的信息，常用的请求报文头如下：

                    Accept：浏览器可接受的MIME类型；

                    Accept-Encoding：浏览器能够进行解码的数据编码方式，比如：gzip；

                    Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时会用到；

                    Connection：表示是否需要持久连接，从HTTP 1.1版本起，默认都开启了Keep-Alive，保持连接特性；

                    Host：初始URL中的主机和端口，它通常是从HTTP URL中提取出来的；

                    User-Agent：请求报文头域允许客户端将它的操作系统、浏览器和其他属性告诉服务器。


    b. 响应头信息(Response_Headers)：

           响应报文头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所
           标识的资源进行下一步访问的信息。常用的响应报文头如下：

                    Content-Type：表示后面的文档属于哪种MIME类型；

                    Date：当前GMT(国际时)的时间；

                    User-Agent：包含了服务器用来处理请求的软件信息；

                    X-Frame-Options：用来给浏览器指示允许一个页面可否在<frame>、<iframe>或者<object>中展现的标记。
                                     网站可以使用此功能来确保自己网站的内容没有被嵌套到别人的网站中去，从而也避免了
                                     点击劫持(Click Jacking)的攻击。

补充关键字解释：

    MIME：多用途互联网邮件扩展(Multipurpose Internet Mail Extensions)，原用于邮件应用扩展，现也应用到浏览器当中；
          浏览器接收到文件后，会进入插件系统进行查找，查找出哪种插件可以识别读取接收到的文件。

          常见MIME类型：

                     ┌──────────────────────┬────────────────┬─────────────────────────────┐
                     │          名称        │      后缀名     │            类型              │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │   超文本标记语言文本   │      .html     │          text/html          │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │        普通文本       │      .txt      │         text/plain          │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │        RTF文本       │      .rtf      │       application/rtf       │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │        GIF图形       │      .gif      │          image/gif          │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │        JPEG图形      │   .jpeg,.jpg   │          image/jpeg         │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │       au声音文件      │       .au      │         audio/basic         │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │       MIDI音乐文件    │   .mid,.midi   │   audio/midi,audio/x-midi   │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │    RealAudio音乐文件  │    .ra,.ram    │    audio/x-pn-realaudio     │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │        MPEG文件      │   .mpg,.mpeg   │          video/mpeg         │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │        AVI文件       │      .avi      │       video/x-msvideo       │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │        GZIP文件      │       .gz      │     application/x-gzip      │
                     ├──────────────────────┼────────────────┼─────────────────────────────┤
                     │        TAR文件       │       .tar     │      application/x-tar      │
                     └──────────────────────┴────────────────┴─────────────────────────────┘


┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                                         JSON格式
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

                    JSON是JavaScript对象表示法，全称为：JavaScript Object Notation，json是一种轻量级的数据交换格式。

                 它独立于语言与平台，json解析器和json库支持不同的编程语言，具有自我描述性，很容易理解。


                    json数据格式示例：

                         ┌─────────────────────────────────────────────────────────────┐
                         │  {                                                          │
                         │      "employees": [                                         │
                         │           {"firstName":"Bill", "lastName":"Gates"},         │
                         │           {"firstName":"George", "lastName":"Bush"},        │
                         │           {"firstName":"Thomas", "lastName":"Carter"}       │
                         │      ]                                                      │
                         │  }                                                          │
                         └─────────────────────────────────────────────────────────────┘

                    JSON语法是JavaScript对象表示法语法的子集：

                        a. 数据在名称/值对中；（键值对：key:value）

                        b. 数据由逗号分隔；（{key1:value1,key2:value2}）

                        c. 花括号保存对象；（{key:value}）

                        d. 方括号保存数组。（{key1:[{key2:value2}]}）
